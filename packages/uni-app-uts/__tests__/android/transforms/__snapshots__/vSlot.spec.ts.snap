// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compiler: transform component slots dynamically named slots 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  [_ctx.one]: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [toDisplayString(foo), toDisplayString(_ctx.bar)]}),
  [_ctx.two]: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const bar = slotProps["bar"]
  return [toDisplayString(_ctx.foo), toDisplayString(bar)]}),
  _: 2 /* DYNAMIC */
}), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots implicit default slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  default: withSlotCtx((): any[] => [
    createElementVNode("view")
  ]),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots named slot with v-for w/ prefixIdentifiers: true 1`] = `
"createVNode(_component_Comp, null, createSlots(utsMapOf({ _: 2 /* DYNAMIC */ }), [
  RenderHelpers.renderList(_ctx.list, (name, __key, __item, _cached): any => {
    return utsMapOf({
      name: name,
      fn: withSlotCtx((): any[] => [toDisplayString(name)])
    })
  })
]), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots named slot with v-if + prefixIdentifiers: true 1`] = `
"createVNode(_component_Comp, null, createSlots(utsMapOf({ _: 2 /* DYNAMIC */ }), [
  isTrue(_ctx.ok)
    ? utsMapOf({
        name: "one",
        fn: withScopedSlotCtx((props: Record<string, any | null>): any[] => [toDisplayString(props)]),
        key: "0"
      })
    : null
]), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots named slot with v-if + v-else-if + v-else 1`] = `
"createVNode(_component_Comp, null, createSlots(utsMapOf({ _: 2 /* DYNAMIC */ }), [
  isTrue(ok)
    ? utsMapOf({
        name: "one",
        fn: withSlotCtx((): any[] => ["foo"]),
        key: "0"
      })
    : isTrue(orNot)
      ? utsMapOf({
          name: "two",
          fn: withScopedSlotCtx((props: Record<string, any | null>): any[] => ["bar"]),
          key: "1"
        })
      : utsMapOf({
          name: "one",
          fn: withSlotCtx((): any[] => ["baz"]),
          key: "2"
        })
]), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots named slot with v-if 1`] = `
"createVNode(_component_Comp, null, createSlots(utsMapOf({ _: 2 /* DYNAMIC */ }), [
  isTrue(ok)
    ? utsMapOf({
        name: "one",
        fn: withSlotCtx((): any[] => ["hello"]),
        key: "0"
      })
    : null
]), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots named slots w/ implicit default slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  one: withSlotCtx((): any[] => ["foo"]),
  default: withSlotCtx((): any[] => [
    "bar",
    createElementVNode("span")
  ]),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots nested slots scoping 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  default: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [
    createVNode(_component_Inner, null, utsMapOf({
      default: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
      const bar = slotProps["bar"]
      return [toDisplayString(foo), toDisplayString(bar), toDisplayString(_ctx.baz)]}),
      _: 2 /* DYNAMIC */
    }), 1024 /* DYNAMIC_SLOTS */),
    " ",
    toDisplayString(foo),
    toDisplayString(_ctx.bar),
    toDisplayString(_ctx.baz)
  ]}),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots on component dynamically named slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  [_ctx.named]: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [toDisplayString(foo), toDisplayString(_ctx.bar)]}),
  _: 2 /* DYNAMIC */
}), 1024 /* DYNAMIC_SLOTS */)"
`;

exports[`compiler: transform component slots on component named slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  named: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [toDisplayString(foo), toDisplayString(_ctx.bar)]}),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots on-component default slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  default: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [toDisplayString(foo), toDisplayString(_ctx.bar)]}),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots template named slots 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  one: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const foo = slotProps["foo"]
  return [toDisplayString(foo), toDisplayString(_ctx.bar)]}),
  two: withScopedSlotCtx((slotProps: Record<string, any | null>): any[] => {
  const bar = slotProps["bar"]
  return [toDisplayString(_ctx.foo), toDisplayString(bar)]}),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots with whitespace: 'preserve' implicit default slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  header: withSlotCtx((): any[] => [" Header "]),
  default: withSlotCtx((): any[] => [
    " ",
    createElementVNode("view")
  ]),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots with whitespace: 'preserve' named default slot + implicit whitespace content 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  header: withSlotCtx((): any[] => [" Header "]),
  default: withSlotCtx((): any[] => [" Default "]),
  _: 1 /* STABLE */
}))"
`;

exports[`compiler: transform component slots with whitespace: 'preserve' should not generate whitespace only default slot 1`] = `
"createVNode(_component_Comp, null, utsMapOf({
  header: withSlotCtx((): any[] => [" Header "]),
  footer: withSlotCtx((): any[] => [" Footer "]),
  _: 1 /* STABLE */
}))"
`;
